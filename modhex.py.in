#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2009 Daniel Holth <dholth@fastmail.fm>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

__all__ = ["HEX", "MODHEX", "decode_modhex"]

# Possible Yubikey alphabets. Generated by code at
# http://bitbucket.org/dholth/yubikey/
alphabets = u"""${ALPHABETS}""".split(u"\n")

index = {}
for i, alphabet in enumerate(alphabets):
    for letter in alphabet:
        index.setdefault(letter, set()).update([i])

HEX = u"0123456789abcdef"
MODHEX = u"cbdefghijklnrtuv"

def decode_modhex(otp, to=MODHEX):
    """Return set() of possible modhex interpretations of a Yubikey otp.

    If otp uses all or most of the 16 characters in its alphabet for that
    keymap, there is only one possible interpretation of that Yubikey otp
    (except for two Armenian keyboard layouts).

    otp: unicode output from a Yubikey.
    to: target alphabet. Usually MODHEX.
    """

    if not isinstance(otp, unicode):
        raise ValueError("otp must be unicode")
    if not isinstance(to, unicode):
        raise ValueError("to must be unicode")
    possible = (set(index[c]) for c in set(otp))
    possible = reduce(lambda a, b: a.intersection(b), possible)
    decoded = set()
    for i in possible:
        a = alphabets[i]
        translation = dict(zip((ord(c) for c in a), to))
        decoded.add(otp.translate(translation))
    return decoded

if __name__ == "__main__":
    hex = u"0123456789abcdef"
    for alphabet in alphabets:
        decode = decode_modhex(alphabet, HEX)
        assert hex in decode, decode

